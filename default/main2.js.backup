let roleEnergizer = require('role.energizer');
let roleHarvester = require('role.harvester');
let roleUpgrader = require('role.upgrader');
let roleBuilder = require('role.builder');
let roleTransporter = require('role.transporter');
let roleAssist = require('role.assist');

/** Function to get the total number of energy available through all structures present in the room.
 * @param Game Object
 * @param roomName String
 * **/
let getTotalEnergy = function (Game, roomName) {
    let totalEnergy = 0;
    let structs = Game.rooms[roomName].find(FIND_MY_STRUCTURES);
    for (let name in structs) {
        let structure = structs[name];
        if (structure.energy != undefined && structure.energy > 0) {
            totalEnergy += structure.energy;
        }
    }
    return totalEnergy;
};

/** Function to generate a enumerated list of creeps
 * @param list Array
 * @param num Integer
 * @param job String
 *  **/
let generateCreeps = function(list, num, job) {
    for(let i = 0; i < num; i++) {
        list[i] = job + i;
    }
};

/** Executes creeps routines and returns the number of creeps **/
/** @param Game **/
runCreeps = function (Game, roomName) {

    /** Total energy from room **/

    let WORKERS = [];
    let totalEnergy = getTotalEnergy(Game, roomName);
    let harvesterCost = roleAssist.calculate_creep_cost(roleHarvester.parts);
    let number_of_creeps = 0;

    for (let name in Game.creeps) {
        let creep = Game.creeps[name];
        WORKERS[number_of_creeps] = name;
        number_of_creeps++;

        /** Run based on classes **/
        if (~name.indexOf("Harvester")) {
            roleHarvester.run(creep, totalEnergy, harvesterCost);
        }

        if (~name.indexOf("Upgrader")) {
            roleUpgrader.run(creep);
        }

        if (~name.indexOf("Transporter")) {
            roleTransporter.run(creep);
        }

    }

    return [number_of_creeps, WORKERS];
};

let concatenateLists = function(listOfLists) {
    MASTER_LIST = [];
    for(let list in listOfLists) {
        MASTER_LIST.concat(list);
    }
    return MASTER_LIST;
};

let getWorkerBlueprint = function(room) {
    BUILDER_LIST = [];
    ENERGIZER_LIST = [];
    HARVESTER_LIST = [];
    UPGRADER_LIST = [];
    TRANSPORTER_LIST = [];
    ALL_LISTS = [BUILDER_LIST, ENERGIZER_LIST, HARVESTER_LIST, UPGRADER_LIST, TRANSPORTER_LIST];

    /** Control your room workers here **/
    if(room == "W2N5") {
        generateCreeps(BUILDER_LIST, 2, 'Builder');
        generateCreeps(ENERGIZER_LIST, 3, 'Energizer');
        //generateCreeps(HARVESTER_LIST, )
        generateCreeps(UPGRADER_LIST, 6, 'Upgrader');
        generateCreeps(BUILDER_LIST, 3, 'Builder');
    }

    /** Another room working blueprint here **/

    return concatenateLists(ALL_LISTS);

};

let differenceOfSets = function(set1, set2) {
  return set1.filter(function(x) { return set2.indexOf(x) < 0});;
};


let spawnMissing = function(MASTER_LIST, creepName, spawnPoint) {
    if(~creepName.indexOf("Harvester")) {
        return roleAssist.spawnProcedure(MASTER_LIST, creepName, roleHarvester.parts, spawnPoint);
    }

    if(~creepName.indexOf("Transporter")) {
        return roleAssist.spawnProcedure(MASTER_LIST, creepName, roleTransporter.parts, spawnPoint);
    }

    if(~creepName.indexOf("Upgrader")) {
        return roleAssist.spawnProcedure(MASTER_LIST, creepName, roleUpgrader.parts, spawnPoint);
    }

    if(~creepName.indexOf("Energizer")) {
        return roleAssist.spawnProcedure(MASTER_LIST, creepName, roleEnergizer.parts, spawnPoint);
    }

    if(creepName.indexOf("Builder")) {
        return roleAssist.spawnProcedure(MASTER_LIST, creepName, roleBuilder.parts, spawnPoint);
    }

    return true;
};

module.exports.loop = function() {

    /** Iterate over controlled game rooms **/
    for(let room_name in Game.rooms) {

        let spawnPoint = Game.room.spawn;
        let number_of_creeps = 0;
        let MASTER_LIST = [];
        let WORKERS = [];
        let INFO_LIST = [];

        /** Get the number of creeps and current creeps alive **/
        INFO_LIST = runCreeps(Game, room_name);
        number_of_creeps = INFO_LIST[0];

        /** As it is and should be list **/
        WORKERS = INFO_LIST[1];
        MASTER_LIST = getWorkerBlueprint(room_name);

        console.log("Room " + room_name + " have " + WORKERS.length + "/" + MASTER_LIST.length + " workers.");
        //If is okay, continue to next room
        if(WORKERS.length == MASTER_LIST.length) {
            continue;
        }

        let missingWorkers = differenceOfSets(MASTER_LIST, WORKERS);
        for(let name in missingWorkers) {
            if(spawnMissing(MASTER_LIST, name, spawnPoint)) {
                console.log("spawnMissing: Error!")
            }
        }

    }



};